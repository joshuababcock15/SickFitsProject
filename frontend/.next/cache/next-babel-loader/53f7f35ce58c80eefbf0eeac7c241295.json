{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // tells apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      const {\n        skip,\n        first\n      } = args; // first thing it does it asks the read function for those items.\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // Check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x); // If there are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are the last page\n      // JUST SEND IT\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We dont have any items, we must goto the network to fetch them\n        return false;\n      } // If there are items just return them from the cache, and we dont need to goto the network\n\n\n      if (items.length) {\n        console.log(`There are ${items.length} items in the cache! Gonna send them to apollo`);\n        return items;\n      } // We either do one of two things:\n      // first things we can do is return the items bc they are already in the cache\n      // The other thing we can do is return false from here(network request)\n\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        first\n      } = args; // This runs when the apollo client comes back from the network with our product\n\n      console.log(`Merging items from the network${incoming.length}`);\n      const merged = existing ? existing.slice(0) : [];\n\n      for (let i = skip; i < skip + incoming.length; i++) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged);\n      return merged;\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/joshuababcock/Desktop/projects/sweetFits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","console","log","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACnC,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CADmC,CAEnC;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CANmC,CAQnC;;AACA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd,CATmC,CAUnC;AACA;AACA;AACA;;AACA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC5D,eAAOG,KAAP;AACD;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OApBkC,CAqBnC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CACG,aAAYN,KAAK,CAACI,MAAO,gDAD5B;AAGA,eAAOJ,KAAP;AACD,OA3BkC,CA6BnC;AAEA;AAEA;;AACD,KApCI;;AAqCLO,IAAAA,KAAK,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,MAAAA;AAAF,KAArB,EAA+B;AAClC,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB,CADkC,CAElC;;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAa,iCAAgCE,QAAQ,CAACJ,MAAO,EAA7D;AACA,YAAMK,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIS,CAAC,GAAGrB,IAAb,EAAmBqB,CAAC,GAAGrB,IAAI,GAAGmB,QAAQ,CAACJ,MAAvC,EAA+CM,CAAC,EAAhD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGrB,IAAL,CAApB;AACD;;AACDgB,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA,aAAOA,MAAP;AACD;;AA/CI,GAAP;AAiDD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // tells apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      const { skip, first } = args;\n      // first thing it does it asks the read function for those items.\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // Check if we have existing items\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      // If there are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are the last page\n      // JUST SEND IT\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n      if (items.length !== first) {\n        // We dont have any items, we must goto the network to fetch them\n        return false;\n      }\n      // If there are items just return them from the cache, and we dont need to goto the network\n      if (items.length) {\n        console.log(\n          `There are ${items.length} items in the cache! Gonna send them to apollo`\n        );\n        return items;\n      }\n\n      // We either do one of two things:\n\n      // first things we can do is return the items bc they are already in the cache\n\n      // The other thing we can do is return false from here(network request)\n    },\n    merge(existing, incoming, { args }) {\n      const { skip, first } = args;\n      // This runs when the apollo client comes back from the network with our product\n      console.log(`Merging items from the network${incoming.length}`);\n      const merged = existing ? existing.slice(0) : [];\n      for (let i = skip; i < skip + incoming.length; i++) {\n        merged[i] = incoming[i - skip];\n      }\n      console.log(merged);\n      return merged;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}