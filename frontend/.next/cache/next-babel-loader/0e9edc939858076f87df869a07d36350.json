{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/joshuababcock/Desktop/projects/sweetFits/frontend/components/Checkout.js\";\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useState } from 'react';\nimport nProgress from 'nprogress';\nimport styled from 'styled-components';\nimport SickButton from './styles/SickButton';\nconst CheckoutFormStyles = styled.form`\n  box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\n  border: 1px solid rgba(0, 0, 0, 0.06);\n  border-radius: 5px;\n  padding: 1rem;\n  display: grid;\n  grid-gap: 1rem;\n`;\nconst ErrorMessage = styled.p`\n  font-size: 12px;\n`;\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n\n  async function handleSubmit(e) {\n    e.preventDefault(); // 1. Stop the form from submitting and turn the loader one\n\n    console.log('We gotta do some work..');\n    setLoading(true); // 2. Start the page transition\n\n    nProgress.start(); // 3. Create the payment method via stripe (Token comes back here if successful)\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    console.log(paymentMethod); // 4. Handle any errors from stripe\n\n    if (error) {\n      setError(error);\n    } // 5. Send the token from step 3 to our keystone server, via a custom mutation!\n    // 6. Change the page to view the order\n    // 7. Close the cart\n    // 8. turn the loader off\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(CheckoutFormStyles, {\n    onSubmit: handleSubmit,\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SickButton, {\n      children: \"Check out now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\nexport default function Checkout() {\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripeLib,\n    children: /*#__PURE__*/_jsxDEV(CheckoutForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/joshuababcock/Desktop/projects/sweetFits/frontend/components/Checkout.js"],"names":["CardElement","Elements","useElements","useStripe","loadStripe","useState","nProgress","styled","SickButton","CheckoutFormStyles","form","ErrorMessage","p","stripeLib","process","env","NEXT_PUBLIC_STRIPE_KEY","CheckoutForm","error","setError","loading","setLoading","stripe","elements","handleSubmit","e","preventDefault","console","log","start","paymentMethod","createPaymentMethod","type","card","getElement","message","Checkout"],"mappings":";;AAAA,SACEA,WADF,EAEEC,QAFF,EAGEC,WAHF,EAIEC,SAJF,QAKO,yBALP;AAMA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,MAAMC,kBAAkB,GAAGF,MAAM,CAACG,IAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMC,YAAY,GAAGJ,MAAM,CAACK,CAAE;AAC9B;AACA,CAFA;AAIA,MAAMC,SAAS,GAAGT,UAAU,CAACU,OAAO,CAACC,GAAR,CAAYC,sBAAb,CAA5B;;AAEA,SAASC,YAAT,GAAwB;AACtB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBd,QAAQ,EAAlC;AACA,QAAM;AAAA,OAACe,OAAD;AAAA,OAAUC;AAAV,MAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMiB,MAAM,GAAGnB,SAAS,EAAxB;AACA,QAAMoB,QAAQ,GAAGrB,WAAW,EAA5B;;AAEA,iBAAesB,YAAf,CAA4BC,CAA5B,EAA+B;AAC7BA,IAAAA,CAAC,CAACC,cAAF,GAD6B,CAE7B;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAP,IAAAA,UAAU,CAAC,IAAD,CAAV,CAJ6B,CAK7B;;AACAf,IAAAA,SAAS,CAACuB,KAAV,GAN6B,CAO7B;;AACA,UAAM;AAAEX,MAAAA,KAAF;AAASY,MAAAA;AAAT,QAA2B,MAAMR,MAAM,CAACS,mBAAP,CAA2B;AAChEC,MAAAA,IAAI,EAAE,MAD0D;AAEhEC,MAAAA,IAAI,EAAEV,QAAQ,CAACW,UAAT,CAAoBlC,WAApB;AAF0D,KAA3B,CAAvC;AAIA2B,IAAAA,OAAO,CAACC,GAAR,CAAYE,aAAZ,EAZ6B,CAa7B;;AACA,QAAIZ,KAAJ,EAAW;AACTC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAhB4B,CAiB7B;AACA;AACA;AAEA;;AACD;;AACD,sBACE,QAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAEM,YAA9B;AAAA,eACGN,KAAK,iBAAI,QAAC,YAAD;AAAA,gBAAeA,KAAK,CAACiB;AAArB;AAAA;AAAA;AAAA;AAAA,YADZ,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;AAED,eAAe,SAASC,QAAT,GAAoB;AACjC,sBACE,QAAC,QAAD;AAAU,IAAA,MAAM,EAAEvB,SAAlB;AAAA,2BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD","sourcesContent":["import {\n  CardElement,\n  Elements,\n  useElements,\n  useStripe,\n} from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useState } from 'react';\nimport nProgress from 'nprogress';\nimport styled from 'styled-components';\nimport SickButton from './styles/SickButton';\n\nconst CheckoutFormStyles = styled.form`\n  box-shadow: 0 1px 2px 2px rgba(0, 0, 0, 0.04);\n  border: 1px solid rgba(0, 0, 0, 0.06);\n  border-radius: 5px;\n  padding: 1rem;\n  display: grid;\n  grid-gap: 1rem;\n`;\n\nconst ErrorMessage = styled.p`\n  font-size: 12px;\n`;\n\nconst stripeLib = loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n\nfunction CheckoutForm() {\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false);\n  const stripe = useStripe();\n  const elements = useElements();\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    // 1. Stop the form from submitting and turn the loader one\n    console.log('We gotta do some work..');\n    setLoading(true);\n    // 2. Start the page transition\n    nProgress.start();\n    // 3. Create the payment method via stripe (Token comes back here if successful)\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n    });\n    console.log(paymentMethod);\n    // 4. Handle any errors from stripe\n    if (error) {\n      setError(error);\n    }\n    // 5. Send the token from step 3 to our keystone server, via a custom mutation!\n    // 6. Change the page to view the order\n    // 7. Close the cart\n\n    // 8. turn the loader off\n  }\n  return (\n    <CheckoutFormStyles onSubmit={handleSubmit}>\n      {error && <ErrorMessage>{error.message}</ErrorMessage>}\n      <CardElement />\n      <SickButton>Check out now</SickButton>\n    </CheckoutFormStyles>\n  );\n}\n\nexport default function Checkout() {\n  return (\n    <Elements stripe={stripeLib}>\n      <CheckoutForm />\n    </Elements>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}